security:

    # Gestion de la sécurité du site

    # Déclaration de l'encodeur. On précise à Symfony que nous allosn encoder un paramètre dans la classe/entity User (password)
    # bcrypt est le type d'encodage utilisé dans l'entité User (clé de hachage pour encoder les mots de passe en BDD)
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    # indique à Symfony où sont les données de l'utilisateur (dans quelles entités) et quelles propriétés on va contrôler
    providers:
        users_in_memory: { memory: null }
        
        # Les données à contrôler sont en base de données, dans l'entité User.
        # La propriété à contrôler est l'email.
        # Le mot de passe est contrôlé automatiquement dans la BDD
        in_database:
            entity:
                class: App\Entity\User
                property: email

    # représentent les darties du site à protéger et par quels moyens
    firewalls: 

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Tout le contenu du site à protéger
        main:

            # N'importe qui peut visiter le site (si on l'enlève, le site est inaccessible)$
            anonymous: true
            lazy: true

            # Le contenu du site sera protégé avec les données stockées en BDD dans la table User (le provider in_database est défini ci-dessus, l20)
            provider: in_database

            # On indique à Symfony que le site est protégé par un système de formulaire de connexion (form_login)
            form_login:
                # login_path indique à Symfony sur quelle route se trouve le formulaire de connexion
                login_path: security_login

                # check_path indique à Symfony sur quelle route il doit contrôler les données saisies dans le formulaire de connexion
                check_path: security_login

            logout:
                # route de déconnexion
                path: security_logout
                
                # Une fois déconnecté, on est redirigé vers la liste des articles via la route (/blog)
                target: blog

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # role_hierarchy indique à Symfony que les internautes ayant un ROLE_ADMIN (rôle administrateur) ont aussi un ROLE_USER.
    # Ils ont donc accès à la totalité du site.
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    
    # access_control indique à Symfony à quelles parties les internautes
    # Par défaut, ces accès sont commentés. Penser à les décommenter lors de la création du Back Office
    # et de l'attribution des roles aux utilisateurs.

    # { path: ^/admin, roles: ROLE_ADMIN } = On indique à Symfony que seuls les ROLE_ADMIN ont accès à cette route '/admin'.
    # Ceux qui ont accès à la route /admin sont les personnes ayant un Role Admin en BDD

    # { path: ^/login, roles: ROLE_USER } = On indique à Symfony que seuls les ROLE_USER ont accès à cette route '/login'.

    # access_denied_url: /blog = Si un utilisateur ayant un ROLE_USER tente d'accéder au Back Office, il est redirigé automatiquement vers la route '/blog',
    # cad l'affichage de tous les articles.
    access_control:
        
        - { path: ^/admin, roles: ROLE_ADMIN }
        
        - { path: ^/login, roles: ROLE_USER }
    
    
    access_denied_url: /blog
